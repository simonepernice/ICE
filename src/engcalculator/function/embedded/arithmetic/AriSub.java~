/*
 *     ICE (Interval Calculator for Engineer) is a programmable calculator working on intervals.
 *     Copyright (C) 2009  Simone Pernice
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package engcalculator.function.embedded.arithmetic;

import engcalculator.domain.DomainIntervalComplex;
import engcalculator.function.infix.*;
import engcalculator.interval.Interval;
import engcalculator.domain.DomainList;

/**
 *
 * @author Simone Pernice <pernice@libero.it>
 */
public class AriSub extends FunctionInfixDualInputSingleOutput {
    private final static DomainList DOMAIN = new DomainList (new DomainIntervalComplex());
    private static AriSum SUM = new AriSum();
    private static AriNegate NEGATE = new AriNegate();
    private final static String[] EXAMPLE_LEFT = {"6_9"};
    private final static String[] EXAMPLE_RIGHT = {"1_3"};
    private final static String[] RESULT = {"3_8"};

    public AriSub() {
        super ("arithmetic", "-", DOMAIN, DOMAIN, true, true, "a ... b  subtracts b from a.", EXAMPLE_LEFT, EXAMPLE_RIGHT, RESULT);
    }

    @Override
    public Interval _computeIntervals(Interval left, Interval right) throws Exception {
        return SUM._computeIntervals(left, NEGATE._computeIntervals(right));
    }

}
