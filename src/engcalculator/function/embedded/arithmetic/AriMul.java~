/*
 *     ICE (Interval Calculator for Engineer) is a programmable calculator working on intervals.
 *     Copyright (C) 2009  Simone Pernice
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package engcalculator.function.embedded.arithmetic;

import engcalculator.domain.DomainIntervalComplex;
import engcalculator.function.infix.FunctionInfixDualInputSingleOutput;
import engcalculator.interval.Interval;
import engcalculator.interval.IntervalPoint;
import engcalculator.interval.IntervalReal;
import engcalculator.domain.DomainList;
import engcalculator.interval.IntervalComplex;

/**
 *
 * @author Simone Pernice <pernice@libero.it>
 */
public class AriMul extends FunctionInfixDualInputSingleOutput {
    private final static DomainList DOMAIN = new DomainList (new DomainIntervalComplex());
    private final static String[] EXAMPLE_LEFT = {"6_9"};
    private final static String[] EXAMPLE_RIGHT = {"1_3"};
    private final static String[] RESULT = {"6_27"};
    private final static AriSum SUM = new AriSum ();
    private final static AriSub SUB = new AriSub ();

    public AriMul() {
        super ("arithmetic", "*", DOMAIN, DOMAIN, true, true, "a ... b multiply the interval a for b as per Kaucher arithmetic. ", EXAMPLE_LEFT, EXAMPLE_RIGHT, RESULT);
    }

    @Override
    public Interval _computeIntervals (Interval x, Interval y) throws Exception {
        double x1 = x.getLeft(), x2 = x.getRight(), y1 = y.getLeft(), y2 = y.getRight();
        Interval rePart;

        if (x.isIntervalPoint() && y.isIntervalPoint()) {
            rePart = new IntervalPoint (x1*y1);
        } else if (x.isPositive()) {
            if (y.isPositive())      rePart = new IntervalReal (x1*y1, x2*y2).computeRoundings();
            else if (y.isNegative()) rePart = new IntervalReal (x2*y1, x1*y2).computeRoundings();
            else if (y.isProper())   rePart = new IntervalReal (x2*y1, x2*y2).computeRoundings();
            else                     rePart = new IntervalReal (x1*y1, x1*y2).computeRoundings();
        } else if (x.isNegative()) {
            if (y.isPositive())      rePart = new IntervalReal (x1*y2, x2*y1).computeRoundings();
            else if (y.isNegative()) rePart = new IntervalReal (x2*y2, x1*y1).computeRoundings();
            else if (y.isProper())   rePart = new IntervalReal (x1*y2, x1*y1).computeRoundings();
            else                     rePart = new IntervalReal (x2*y2, x2*y1).computeRoundings();
        } else if (x.isProper()) {
            if (y.isPositive())      rePart = new IntervalReal (x1*y2, x2*y2).computeRoundings();
            else if (y.isNegative()) rePart = new IntervalReal (x2*y1, x1*y1).computeRoundings();
            else if (y.isProper())   rePart = new IntervalReal (Math.min(x1*y2, x2*y1), Math.max(x1*y1, x2*y2)).computeRoundings();
            else                     rePart = new IntervalPoint (0);
        } else {
            if (y.isPositive())      rePart = new IntervalReal (x1*y1, x2*y1).computeRoundings();
            else if (y.isNegative()) rePart = new IntervalReal (x2*y2, x1*y2).computeRoundings();
            else if (y.isProper())   rePart = new IntervalPoint (0);
            else                     rePart = new IntervalReal (Math.max(x1*y1, x2*y2), Math.min(x1*y2, x2*y1)).computeRoundings();
        }

        Interval imPart = null;
        
        if (x.hasImaginaryPart() || y.hasImaginaryPart()) {
            Interval xim = x.getImaginaryPart(), yim = y.getImaginaryPart();
            if (! x.hasImaginaryPart()) {
                imPart = _computeIntervals(x.getRealPart(), yim);
            } else if (! y.hasImaginaryPart()) {
                imPart = _computeIntervals(xim, y.getRealPart());
            } else {
                rePart = SUB._computeIntervals(rePart, _computeIntervals(xim, yim));
                imPart = SUM._computeIntervals(_computeIntervals(xim, y.getRealPart()), _computeIntervals(x.getRealPart(), yim));
            }
        }

        if (imPart != null && !imPart.equals(Interval.ZERO)) return new IntervalComplex(rePart, imPart);
        return rePart;
    }
}
