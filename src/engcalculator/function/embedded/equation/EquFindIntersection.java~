/*
 *     ICE (Interval Calculator for Engineer) is a programmable calculator working on intervals.
 *     Copyright (C) 2009  Simone Pernice
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package engcalculator.function.embedded.equation;


import engcalculator.interval.Interval;
import engcalculator.interval.ListIntervals;
import engcalculator.interval.IntervalPoint;
import engcalculator.domain.DomainList;
import engcalculator.domain.DomainFunctionPrefix;
import engcalculator.domain.DomainIntervalReal;
import engcalculator.function.prefix.FunctionPrefix;

/**
 *
 * @author Simone Pernice <pernice@libero.it>
 */

public class EquFindIntersection extends EquBisectionMethod {
    private final static String[] EXAMPLE = {"$sin, $cos, 0_PI, 1_2*PI"};
    private final static String[] RESULT = {"-2*arcTan(1-sqrt(2)),2*(PI-arcTan(1+sqrt(2)))"};
    private final static DomainList DOMAIN = new DomainList (new DomainFunctionPrefix(1), new DomainFunctionPrefix(1), new DomainIntervalReal ());

    private FunctionPrefix f, g;

    public EquFindIntersection() {
        super ("FindIntersection", (byte) 3, DOMAIN, false, true, "... finds the intersection between a couple of 'thick' functions. It needs the function names and then the initial intervals containing the intersection. That interval will be shrunken to the smallest containing the intersection. It is used bisection method. If the function returns multiple variables only the first element will be used to find the intersection.", EXAMPLE, RESULT);
    }

    @Override
    public ListIntervals _compute(ListIntervals input) throws Exception {
        f = FunctionPrefix.getFunction(input.getFirst().getName());
        g = FunctionPrefix.getFunction(input.get(1).getName());

        return findIntersection(input.get(2));
    }

    @Override
    Interval f(double x) throws Exception {
        return f.compute(new ListIntervals(new IntervalPoint(x))).getFirst();
    }

    @Override
    Interval g(double x) throws Exception {
        return g.compute(new ListIntervals(new IntervalPoint(x))).getFirst();
    }

}
