/*
 *     ICE (Interval Calculator for Engineer) is a programmable calculator working on intervals.
 *     Copyright (C) 2009  Simone Pernice
 * 
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 * 
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 * 
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ConsoleEngCalculatorSearch.java
 *
 * Created on Sep 30, 2011, 11:35:31 PM
 */

package engcalculatorConsole.findReplace;

import java.awt.event.KeyEvent;
import javax.imageio.ImageIO;
import javax.swing.text.JTextComponent;
import javax.swing.JDialog;
import java.awt.Frame;

/**
 *
 * @author Simone Pernice <pernice@libero.it>
 */
public final class EngCalculatorConsoleReplace extends JDialog {

    private JTextComponent jTextComponentoReplaceArea;
    /** Creates new form ConsoleEngCalculatorSearch
     * @param searchArea */
    public EngCalculatorConsoleReplace(JTextComponent searchArea, JDialog parent) {
        super (parent, true);
        setLocationRelativeTo(parent);        
        init(searchArea);
    }
    
    public EngCalculatorConsoleReplace(JTextComponent searchArea, Frame parent) {
        super (parent, true);        
        setLocationRelativeTo(parent);
        init(searchArea);
    }
        
    private void init (JTextComponent searchArea) {
        initComponents();
        
        jButtonReplace.setMnemonic(KeyEvent.VK_R);
        
        this.jTextComponentoReplaceArea = searchArea;

        try {
            setIconImage(ImageIO.read(getClass().getResourceAsStream("resources/icon.png")));
        } catch (Exception ex) {
            //It was not possible to set the proper icon...
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldTextToSearch = new javax.swing.JTextField();
        jButtonReplace = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jTextFieldTextToReplace = new javax.swing.JTextField();
        jCheckBoxRegularExpression = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxCaseInsensitive = new javax.swing.JCheckBox();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(engcalculatorConsole.EngCalculatorConsoleApp.class).getContext().getResourceMap(EngCalculatorConsoleReplace.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setLocationByPlatform(true);
        setName("Form"); // NOI18N

        jTextFieldTextToSearch.setText(resourceMap.getString("jTextFieldTextToSearch.text")); // NOI18N
        jTextFieldTextToSearch.setName("jTextFieldTextToSearch"); // NOI18N

        jButtonReplace.setMnemonic('N');
        jButtonReplace.setText(resourceMap.getString("jButtonReplace.text")); // NOI18N
        jButtonReplace.setName("jButtonReplace"); // NOI18N
        jButtonReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReplaceActionPerformed(evt);
            }
        });

        jButtonClose.setMnemonic('C');
        jButtonClose.setText(resourceMap.getString("jButtonClose.text")); // NOI18N
        jButtonClose.setName("jButtonClose"); // NOI18N
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jTextFieldTextToReplace.setName("jTextFieldTextToReplace"); // NOI18N

        jCheckBoxRegularExpression.setText(resourceMap.getString("jCheckBoxRegularExpression.text")); // NOI18N
        jCheckBoxRegularExpression.setName("jCheckBoxRegularExpression"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jCheckBoxCaseInsensitive.setText(resourceMap.getString("jCheckBoxCaseInsensitive.text")); // NOI18N
        jCheckBoxCaseInsensitive.setName("jCheckBoxCaseInsensitive"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonReplace)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonClose))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldTextToReplace, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxRegularExpression, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTextToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxCaseInsensitive))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTextToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTextToReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxRegularExpression)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxCaseInsensitive)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReplace)
                    .addComponent(jButtonClose))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReplaceActionPerformed
        replace(jTextFieldTextToSearch.getText(), jTextFieldTextToReplace.getText(), jCheckBoxRegularExpression.isSelected(), jCheckBoxCaseInsensitive.isSelected());
    }//GEN-LAST:event_jButtonReplaceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonReplace;
    private javax.swing.JCheckBox jCheckBoxCaseInsensitive;
    private javax.swing.JCheckBox jCheckBoxRegularExpression;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextFieldTextToReplace;
    private javax.swing.JTextField jTextFieldTextToSearch;
    // End of variables declaration//GEN-END:variables

    private void replace (String search, String replace, boolean regularExpression, boolean caseInsensitive ) {
        String output = jTextComponentoReplaceArea.getText();
        if (output == null) return;        
        if (! regularExpression) {
            if (caseInsensitive) {
                StringBuilder outputSBLC = new StringBuilder (output.toLowerCase());
                StringBuilder outputSB = new StringBuilder (output);
                String searchLC = search.toLowerCase();
                String replaceLC = replace.toLowerCase();
                final int searchLength = search.length();
                int i;
                while ((i = outputSBLC.indexOf(searchLC)) != -1) {
                    outputSBLC.replace(i, i+searchLength, replaceLC);
                    outputSB.replace(i, i+searchLength, replace);
                }
                output = outputSB.toString();
            } else {        
                output = output.replace(search, replace);
            }
        } else {
            if (caseInsensitive) {//The directive (?i) makes regular expression case insensitive
                if (!search.contains("(?i)")) search = "(?i)"+search;
            }
            output = output.replaceAll(search, replace);   
        }
        jTextComponentoReplaceArea.setText (output);
    }
    
    @Override
    public void setVisible (boolean vis) {
        String se = jTextComponentoReplaceArea.getSelectedText();
        if (se != null) jTextFieldTextToSearch.setText(se);
        super.setVisible(vis);        
    }    
}
