/*
 *     ICE (Interval Calculator for Engineer) is a programmable calculator working on intervals.
 *     Copyright (C) 2009  Simone Pernice
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package engcalculatorConsole;

/**
 *
 * @author Stefania Giaconia
 */

import engcalculatorConsole.ecInput.EngCalculatorConsoleInputEditor;
import engcalculatorConsole.ecHistory.CommandHistory;
import engcalculatorConsole.ecHistory.EngCalculatorConsoleHistoryEditor;
import engcalculatorConsole.findReplace.EngCalculatorConsoleFind;
import engcalculatorConsole.ecConsolePlotDisplay.EngCalculatorConsolePlotDisplay;
import engcalculatorConsole.iceJPanel.OutputTextData;
import engcalculatorConsole.iceJTextArea.ICEJTextArea;
import engcalculator.AsynchronousOutput;
import engcalculator.Calculator;
import engcalculator.CalculatorThread;
import engcalculator.function.embedded.multilineExpression.MleStatement;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.*;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.SingleFrameApplication;

/**
 * The application's main frame.
 */
public final class EngCalculatorConsoleMainFrame extends FrameView implements AsynchronousOutput, KeyListener {

    private final StyledDocument outdoc;
    private final Style REGULAR;
    private final Style ITALIC;
    private final Style BOLD;
    private final EngCalculatorConsoleApp console;

    public EngCalculatorConsoleMainFrame(SingleFrameApplication app) {
        super(app);
        try {
            getFrame().setIconImage(ImageIO.read(getClass().getResourceAsStream("resources/icon.png")));
        } catch (Exception ex) {
            //It was not possible to set the proper icon...
        }

        initComponents();
        
        console = (EngCalculatorConsoleApp) app;

        MainFrameFocusTraversalPolicy mftp = new MainFrameFocusTraversalPolicy();
        mftp.addComponent(jTextAreaInput);
        mftp.addComponent(jTextPaneOutput);
        getFrame().setFocusTraversalPolicy(mftp);

        outdoc = jTextPaneOutput.getStyledDocument();
        REGULAR = outdoc.addStyle( "regular", StyleContext.getDefaultStyleContext().getStyle( StyleContext.DEFAULT_STYLE ) );
        
        ITALIC = outdoc.addStyle( "italic", REGULAR );
        StyleConstants.setItalic(ITALIC, true);
        
        BOLD = outdoc.addStyle( "bold", REGULAR );
        StyleConstants.setBold( BOLD, true );

        jFileChooserICE = new JFileChooser();
        jFileChooserICE.setLocation(getFrame().getLocation());
        FileNameExtensionFilter fnefICE = new FileNameExtensionFilter("ICE command history file","ice");
        jFileChooserICE.addChoosableFileFilter(fnefICE);
        jFileChooserICE.setFileFilter(fnefICE);
        
        jFileChooserTXT = new JFileChooser();
        FileNameExtensionFilter fnefTXT = new FileNameExtensionFilter("Text file","txt");
        jFileChooserTXT.addChoosableFileFilter(fnefTXT);
        jFileChooserTXT.setFileFilter(fnefTXT);
        
        kernelStartUp (true);
        loadStartUpFile();       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMain = new javax.swing.JPanel();
        outputPane = new javax.swing.JScrollPane();
        jTextPaneOutput = new javax.swing.JTextPane();
        jScrollPane = new javax.swing.JScrollPane();
        jTextAreaInput = new engcalculatorConsole.iceJTextArea.ICEJTextArea (this, this);
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu jMenuFile = new javax.swing.JMenu();
        jMenuNew = new javax.swing.JMenuItem();
        jMenuItemLoad = new javax.swing.JMenuItem();
        jMenuItemLoadAppending = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jMenuItemSaveAndLoad = new javax.swing.JMenuItem();
        jMenuItemSaveToStartup = new javax.swing.JMenuItem();
        jMenuItemSaveOutputToTXT = new javax.swing.JMenuItem();
        javax.swing.JMenuItem jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemUndo = new javax.swing.JMenuItem();
        jMenuItemRedo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemHistoryPrevius = new javax.swing.JMenuItem();
        jMenuItemHistoryNext = new javax.swing.JMenuItem();
        jMenuItemEditHistory = new javax.swing.JMenuItem();
        jMenuItemEditInput = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItemCleanOutput = new javax.swing.JMenuItem();
        jMenuItemClean = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItemFind = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItemNewLine = new javax.swing.JMenuItem();
        jMenuCalculator = new javax.swing.JMenu();
        jCheckBoxMenuStepByStep = new javax.swing.JCheckBoxMenuItem();
        jMenuItemNextStep = new javax.swing.JMenuItem();
        jMenuItemBreak = new javax.swing.JMenuItem();
        jCheckBoxMenuITrace = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemRunNewKernel = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemDraw = new javax.swing.JMenuItem();
        javax.swing.JMenu jMenuHelp = new javax.swing.JMenu();
        jCheckBoxMenuItemPreprocessor = new javax.swing.JCheckBoxMenuItem();
        jMenuItemSuggest = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenuItemLastFunctionHelp = new javax.swing.JMenuItem();
        jMenuItemHelp = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem jMenuItemAbout = new javax.swing.JMenuItem();
        jMenuDonation = new javax.swing.JMenuItem();

        jPanelMain.setName("jPanelMain"); // NOI18N

        outputPane.setName("outputPane"); // NOI18N

        jTextPaneOutput.setEditable(false);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(engcalculatorConsole.EngCalculatorConsoleApp.class).getContext().getResourceMap(EngCalculatorConsoleMainFrame.class);
        jTextPaneOutput.setBackground(resourceMap.getColor("jTextPaneOutput.background")); // NOI18N
        jTextPaneOutput.setFont(resourceMap.getFont("jTextPaneOutput.font")); // NOI18N
        jTextPaneOutput.setName("jTextPaneOutput"); // NOI18N
        outputPane.setViewportView(jTextPaneOutput);

        jScrollPane.setName("jScrollPane"); // NOI18N

        jTextAreaInput.setBackground(resourceMap.getColor("jTextAreaInput.background")); // NOI18N
        jTextAreaInput.setColumns(20);
        jTextAreaInput.setFont(resourceMap.getFont("jTextAreaInput.font")); // NOI18N
        jTextAreaInput.setTabSize(0);
        jTextAreaInput.setText(resourceMap.getString("jTextAreaInput.text")); // NOI18N
        jTextAreaInput.setName("jTextAreaInput"); // NOI18N
        jScrollPane.setViewportView(jTextAreaInput);

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputPane)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputPane, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        jMenuFile.setText(resourceMap.getString("jMenuFile.text")); // NOI18N
        jMenuFile.setName("jMenuFile"); // NOI18N

        jMenuNew.setText(resourceMap.getString("jMenuNew.text")); // NOI18N
        jMenuNew.setName("jMenuNew"); // NOI18N
        jMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuNew);

        jMenuItemLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemLoad.setText(resourceMap.getString("jMenuItemLoad.text")); // NOI18N
        jMenuItemLoad.setName("jMenuItemLoad"); // NOI18N
        jMenuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemLoad);

        jMenuItemLoadAppending.setText(resourceMap.getString("jMenuItemLoadAppending.text")); // NOI18N
        jMenuItemLoadAppending.setName("jMenuItemLoadAppending"); // NOI18N
        jMenuItemLoadAppending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadAppendingActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemLoadAppending);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setText(resourceMap.getString("jMenuItemSave.text")); // NOI18N
        jMenuItemSave.setName("jMenuItemSave"); // NOI18N
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemSaveAs.setText(resourceMap.getString("jMenuItemSaveAs.text")); // NOI18N
        jMenuItemSaveAs.setName("jMenuItemSaveAs"); // NOI18N
        jMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveAsActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveAs);

        jMenuItemSaveAndLoad.setText(resourceMap.getString("jMenuItemSaveAndLoad.text")); // NOI18N
        jMenuItemSaveAndLoad.setActionCommand(resourceMap.getString("jMenuItemSaveAndLoad.actionCommand")); // NOI18N
        jMenuItemSaveAndLoad.setName("jMenuItemSaveAndLoad"); // NOI18N
        jMenuItemSaveAndLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveAndLoadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveAndLoad);

        jMenuItemSaveToStartup.setText(resourceMap.getString("jMenuItemSaveToStartup.text")); // NOI18N
        jMenuItemSaveToStartup.setActionCommand(resourceMap.getString("jMenuItemSaveToStartup.actionCommand")); // NOI18N
        jMenuItemSaveToStartup.setName("jMenuItemSaveToStartup"); // NOI18N
        jMenuItemSaveToStartup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveToStartupActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveToStartup);

        jMenuItemSaveOutputToTXT.setText(resourceMap.getString("jMenuItemSaveOutputToTXT.text")); // NOI18N
        jMenuItemSaveOutputToTXT.setActionCommand(resourceMap.getString("jMenuItemSaveOutputToTXT.actionCommand")); // NOI18N
        jMenuItemSaveOutputToTXT.setName("jMenuItemSaveOutputToTXT"); // NOI18N
        jMenuItemSaveOutputToTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveOutputToTXTActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveOutputToTXT);

        jMenuItemExit.setText(resourceMap.getString("jMenuItemExit.text")); // NOI18N
        jMenuItemExit.setName("jMenuItemExit"); // NOI18N
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        menuBar.add(jMenuFile);

        jMenuEdit.setText(resourceMap.getString("jMenuEdit.text")); // NOI18N
        jMenuEdit.setName("jMenuEdit"); // NOI18N

        jMenuItemUndo.setText(resourceMap.getString("jMenuItemUndo.text")); // NOI18N
        jMenuItemUndo.setName("jMenuItemUndo"); // NOI18N
        jMenuItemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUndoActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemUndo);

        jMenuItemRedo.setText(resourceMap.getString("jMenuItemRedo.text")); // NOI18N
        jMenuItemRedo.setName("jMenuItemRedo"); // NOI18N
        jMenuItemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRedoActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemRedo);

        jSeparator3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator3.setName("jSeparator3"); // NOI18N
        jMenuEdit.add(jSeparator3);

        jMenuItemHistoryPrevius.setText(resourceMap.getString("jMenuItemHistoryPrevius.text")); // NOI18N
        jMenuItemHistoryPrevius.setName("jMenuItemHistoryPrevius"); // NOI18N
        jMenuItemHistoryPrevius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHistoryPreviusActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemHistoryPrevius);

        jMenuItemHistoryNext.setText(resourceMap.getString("jMenuItemHistoryNext.text")); // NOI18N
        jMenuItemHistoryNext.setName("jMenuItemHistoryNext"); // NOI18N
        jMenuItemHistoryNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHistoryNextActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemHistoryNext);

        jMenuItemEditHistory.setText(resourceMap.getString("jMenuItemEditHistory.text")); // NOI18N
        jMenuItemEditHistory.setName("jMenuItemEditHistory"); // NOI18N
        jMenuItemEditHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditHistoryActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditHistory);

        jMenuItemEditInput.setText(resourceMap.getString("jMenuItemEditInput.text")); // NOI18N
        jMenuItemEditInput.setActionCommand(resourceMap.getString("jMenuItemEditInput.actionCommand")); // NOI18N
        jMenuItemEditInput.setName("jMenuItemEditInput"); // NOI18N
        jMenuItemEditInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditInputActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditInput);

        jSeparator4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator4.setName("jSeparator4"); // NOI18N
        jMenuEdit.add(jSeparator4);

        jMenuItemCleanOutput.setText(resourceMap.getString("jMenuItemCleanOutput.text")); // NOI18N
        jMenuItemCleanOutput.setName("jMenuItemCleanOutput"); // NOI18N
        jMenuItemCleanOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCleanOutputActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemCleanOutput);

        jMenuItemClean.setText(resourceMap.getString("jMenuItemClean.text")); // NOI18N
        jMenuItemClean.setName("jMenuItemClean"); // NOI18N
        jMenuItemClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCleanActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemClean);

        jSeparator5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator5.setName("jSeparator5"); // NOI18N
        jMenuEdit.add(jSeparator5);

        jMenuItemFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemFind.setText(resourceMap.getString("jMenuItemFind.text")); // NOI18N
        jMenuItemFind.setName("jMenuItemFind"); // NOI18N
        jMenuItemFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFindActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemFind);

        jSeparator6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator6.setName("jSeparator6"); // NOI18N
        jMenuEdit.add(jSeparator6);

        jMenuItemNewLine.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNewLine.setText(resourceMap.getString("jMenuItemNewLine.text")); // NOI18N
        jMenuItemNewLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewLineActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemNewLine);

        menuBar.add(jMenuEdit);

        jMenuCalculator.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuCalculator.setText(resourceMap.getString("jMenuCalculator.text")); // NOI18N
        jMenuCalculator.setName("jMenuCalculator"); // NOI18N

        jCheckBoxMenuStepByStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jCheckBoxMenuStepByStep.setText(resourceMap.getString("jCheckBoxMenuStepByStep.text")); // NOI18N
        jCheckBoxMenuStepByStep.setName("jCheckBoxMenuStepByStep"); // NOI18N
        jCheckBoxMenuStepByStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuStepByStepActionPerformed(evt);
            }
        });
        jMenuCalculator.add(jCheckBoxMenuStepByStep);

        jMenuItemNextStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jMenuItemNextStep.setText(resourceMap.getString("jMenuItemNextStep.text")); // NOI18N
        jMenuItemNextStep.setName("jMenuItemNextStep"); // NOI18N
        jMenuItemNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNextStepActionPerformed(evt);
            }
        });
        jMenuCalculator.add(jMenuItemNextStep);

        jMenuItemBreak.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemBreak.setText(resourceMap.getString("jMenuItemBreak.text")); // NOI18N
        jMenuItemBreak.setName("jMenuItemBreak"); // NOI18N
        jMenuItemBreak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBreakActionPerformed(evt);
            }
        });
        jMenuCalculator.add(jMenuItemBreak);

        jCheckBoxMenuITrace.setText(resourceMap.getString("jCheckBoxMenuITrace.text")); // NOI18N
        jCheckBoxMenuITrace.setName("jCheckBoxMenuITrace"); // NOI18N
        jCheckBoxMenuITrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuITraceActionPerformed(evt);
            }
        });
        jMenuCalculator.add(jCheckBoxMenuITrace);

        jSeparator1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator1.setName("jSeparator1"); // NOI18N
        jMenuCalculator.add(jSeparator1);

        jMenuItemRunNewKernel.setText(resourceMap.getString("jMenuItemRunNewKernel.text")); // NOI18N
        jMenuItemRunNewKernel.setName("jMenuItemRunNewKernel"); // NOI18N
        jMenuItemRunNewKernel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRunNewKernelActionPerformed(evt);
            }
        });
        jMenuCalculator.add(jMenuItemRunNewKernel);

        jSeparator2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator2.setName("jSeparator2"); // NOI18N
        jMenuCalculator.add(jSeparator2);

        jMenuItemDraw.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemDraw.setText(resourceMap.getString("jMenuItemDraw.text")); // NOI18N
        jMenuItemDraw.setName("jMenuItemDraw"); // NOI18N
        jMenuItemDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDrawActionPerformed(evt);
            }
        });
        jMenuCalculator.add(jMenuItemDraw);

        menuBar.add(jMenuCalculator);

        jMenuHelp.setText(resourceMap.getString("jMenuHelp.text")); // NOI18N
        jMenuHelp.setName("jMenuHelp"); // NOI18N

        jCheckBoxMenuItemPreprocessor.setSelected(true);
        jCheckBoxMenuItemPreprocessor.setText(resourceMap.getString("jCheckBoxMenuItemPreprocessor.text")); // NOI18N
        jCheckBoxMenuItemPreprocessor.setName("jCheckBoxMenuItemPreprocessor"); // NOI18N
        jCheckBoxMenuItemPreprocessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemPreprocessorActionPerformed(evt);
            }
        });
        jMenuHelp.add(jCheckBoxMenuItemPreprocessor);

        jMenuItemSuggest.setText(resourceMap.getString("jMenuItemSuggest.text")); // NOI18N
        jMenuItemSuggest.setName("jMenuItemSuggest"); // NOI18N
        jMenuItemSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSuggestActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemSuggest);

        jSeparator7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator7.setName("jSeparator7"); // NOI18N
        jMenuHelp.add(jSeparator7);

        jMenuItemLastFunctionHelp.setText(resourceMap.getString("jMenuItemLastFunctionHelp.text")); // NOI18N
        jMenuItemLastFunctionHelp.setName("jMenuItemLastFunctionHelp"); // NOI18N
        jMenuItemLastFunctionHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLastFunctionHelpActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemLastFunctionHelp);

        jMenuItemHelp.setText(resourceMap.getString("jMenuItemHelp.text")); // NOI18N
        jMenuItemHelp.setName("jMenuItemHelp"); // NOI18N
        jMenuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelp);

        jSeparator8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSeparator8.setName("jSeparator8"); // NOI18N
        jMenuHelp.add(jSeparator8);

        jMenuItemAbout.setText(resourceMap.getString("jMenuItemAbout.text")); // NOI18N
        jMenuItemAbout.setName("jMenuItemAbout"); // NOI18N
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        jMenuDonation.setText(resourceMap.getString("jMenuDonation.text")); // NOI18N
        jMenuDonation.setName("jMenuDonation"); // NOI18N
        jMenuDonation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDonationActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuDonation);

        menuBar.add(jMenuHelp);

        setComponent(jPanelMain);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemBreakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBreakActionPerformed
        if (calculatorThread != null && calculatorThread.getState() == Thread.State.RUNNABLE) {
            calculatorThread.stopCalculus();
            printOnOutputAreaInRegular("The last operation was aborted.\n");
        }
    }//GEN-LAST:event_jMenuItemBreakActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        if (aboutBox == null) {
            JFrame mainFrame = EngCalculatorConsoleApp.getApplication().getMainFrame();
            aboutBox = new EngCalculatorConsoleAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        aboutBox.setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDrawActionPerformed
        if (drawBox == null) drawBox = new EngCalculatorConsolePlotDisplay(this);
        drawBox.setVisible(true);
    }//GEN-LAST:event_jMenuItemDrawActionPerformed

    private void jMenuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpActionPerformed
        if (helpBox == null) {
            JFrame mainFrame = EngCalculatorConsoleApp.getApplication().getMainFrame();
            helpBox = new EngCalculatorConsoleHelp(mainFrame);
        }
        helpBox.setVisible(true);
    }//GEN-LAST:event_jMenuItemHelpActionPerformed

    private void jMenuItemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadActionPerformed
        if (commandHistory.isModified())
            if (JOptionPane.CANCEL_OPTION == JOptionPane.showConfirmDialog(this.getComponent(), "Are you sure to load a new file? The history was modified and will be lost", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE)) {
                return;
            }       
        int res = jFileChooserICE.showOpenDialog(this.getComponent());
        if (res == JFileChooser.APPROVE_OPTION) {
            jTextPaneOutput.setText("");
            jTextAreaInput.setText ("");            
            workingFile = jFileChooserICE.getSelectedFile();
            kernelStartUp(true);
            commandHistory.deleteAllCommands();
            loadHistoryFile();
        }
    }//GEN-LAST:event_jMenuItemLoadActionPerformed

    private void jMenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAsActionPerformed
        int res = jFileChooserICE.showSaveDialog(this.getComponent());
        if (res == JFileChooser.APPROVE_OPTION) {
            workingFile = jFileChooserICE.getSelectedFile();
            if (workingFile.getName().indexOf(".ice") != workingFile.getName().length()-4) try {
                workingFile = new File(workingFile.getCanonicalPath() + ".ice");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this.getComponent(), "It was not possible to save the file: "+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (workingFile.exists())
                if (JOptionPane.CANCEL_OPTION == JOptionPane.showConfirmDialog(this.getComponent(), "Are you sure? A file with the same name exists and will be overwritten.", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE)) {
                    workingFile = null;
                    return;
                }

            saveHistoryFile();
        }
    }//GEN-LAST:event_jMenuItemSaveAsActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        if (workingFile != null) saveHistoryFile();
        else jMenuItemSaveAsActionPerformed(null);
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemHistoryPreviusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHistoryPreviusActionPerformed
        previousHistory();
    }//GEN-LAST:event_jMenuItemHistoryPreviusActionPerformed

    private void jMenuItemHistoryNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHistoryNextActionPerformed
        nextHistory();
    }//GEN-LAST:event_jMenuItemHistoryNextActionPerformed

    private void jMenuItemEditHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditHistoryActionPerformed
        if (historyEditor == null) {
            JFrame mainFrame = EngCalculatorConsoleApp.getApplication().getMainFrame();
            historyEditor = new EngCalculatorConsoleHistoryEditor(mainFrame, true, this, commandHistory);
        }
        historyEditor.setVisible();
    }//GEN-LAST:event_jMenuItemEditHistoryActionPerformed

    private void jMenuItemCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCleanActionPerformed
        jTextAreaInput.setText("");
    }//GEN-LAST:event_jMenuItemCleanActionPerformed

    private void jMenuItemSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSuggestActionPerformed
        ((ICEJTextArea) jTextAreaInput).suggestFunctionOrVariable();
    }//GEN-LAST:event_jMenuItemSuggestActionPerformed

    private void jMenuItemNewLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewLineActionPerformed
        appendNewLine();
    }//GEN-LAST:event_jMenuItemNewLineActionPerformed

    private void jMenuItemCleanOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCleanOutputActionPerformed
        jTextPaneOutput.setText("");
    }//GEN-LAST:event_jMenuItemCleanOutputActionPerformed

    private void jMenuItemSaveToStartupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveToStartupActionPerformed
        workingFile =  STARTUPFILE;
        saveHistoryFile();
    }//GEN-LAST:event_jMenuItemSaveToStartupActionPerformed

    private void jMenuItemRunNewKernelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRunNewKernelActionPerformed
        kernelStartUp(false);
    }//GEN-LAST:event_jMenuItemRunNewKernelActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        console.closeProgram();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jCheckBoxMenuItemPreprocessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemPreprocessorActionPerformed
        setPreprocessor(jCheckBoxMenuItemPreprocessor.isSelected());
    }//GEN-LAST:event_jCheckBoxMenuItemPreprocessorActionPerformed

    private void jMenuItemFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFindActionPerformed
        if (findBox == null) findBox = new EngCalculatorConsoleFind(jTextPaneOutput, EngCalculatorConsoleApp.getApplication().getMainFrame());
        findBox.setVisible(true);
    }//GEN-LAST:event_jMenuItemFindActionPerformed

        public void keyTyped(java.awt.event.KeyEvent evt) {                                        
        if (! evt.isControlDown()) {
            switch (evt.getKeyChar()) {
                case '\n':
                    final String input = jTextAreaInput.getText();
                    final int l = input.length()-1;
                    if (l>=0) {
                        if (input.charAt(l)=='\n') jTextAreaInput.setText(input.substring(0, l));//This is to clear the extra enter given after evaluating a line
                    }
                    break;                
            }            
        }
}                                       

    public void keyReleased(KeyEvent evt) {    
    }
    
    public void keyPressed(java.awt.event.KeyEvent evt) {                                          
    if (evt.isControlDown()) {
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_H:
                jMenuItemEditHistoryActionPerformed(null);
                break;
            case KeyEvent.VK_I:
                jMenuItemEditInputActionPerformed(null);
                break;                  
        }
    } else {
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ESCAPE:
                jTextAreaInput.setText("");
                break;
            case KeyEvent.VK_ENTER:
                evaluateLine();
                break;                    
            case KeyEvent.VK_PAGE_UP:
                previousHistory();
                break;
            case KeyEvent.VK_PAGE_DOWN:
                nextHistory();
                break;
        }
    }
}         
    private void jMenuItemLoadAppendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadAppendingActionPerformed
        int res = jFileChooserICE.showOpenDialog(this.getComponent());
        if (res == JFileChooser.APPROVE_OPTION) {
            workingFile = jFileChooserICE.getSelectedFile();            
            loadHistoryFile();
        }
    }//GEN-LAST:event_jMenuItemLoadAppendingActionPerformed

    private void jMenuItemEditInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditInputActionPerformed
        if (inputEditor == null) {
            JFrame mainFrame = EngCalculatorConsoleApp.getApplication().getMainFrame();
            inputEditor = new EngCalculatorConsoleInputEditor(mainFrame, true, this, jTextAreaInput);
        }
        inputEditor.setVisible();
    }//GEN-LAST:event_jMenuItemEditInputActionPerformed

    private void jMenuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNewActionPerformed
        if (commandHistory.isModified())
            if (JOptionPane.CANCEL_OPTION == JOptionPane.showConfirmDialog(this.getComponent(), "Are you sure to restart a new session? The history was modified and will be lost", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE)) {
                return;
            }       
        jTextPaneOutput.setText("");
        jTextAreaInput.setText ("");
        kernelStartUp(true);
        commandHistory.deleteAllCommands();
        loadStartUpFile();                
    }//GEN-LAST:event_jMenuNewActionPerformed

    private void jMenuDonationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDonationActionPerformed
        JOptionPane.showMessageDialog(this.getComponent(), "If you are here, I guess you like and use ICE.\nThe development of ICE took long time and effort.\nI am sure you would offer a coffe to me if meeting outside.\nYou can do the same donating the money for a coffe to me.\nSimone Pernice, Via Alagna 11, 10155 Turin, Italy.");
    }//GEN-LAST:event_jMenuDonationActionPerformed

    private void jMenuItemLastFunctionHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLastFunctionHelpActionPerformed
        ((ICEJTextArea) jTextAreaInput).printLastFunctionHelp ();
    }//GEN-LAST:event_jMenuItemLastFunctionHelpActionPerformed

    private void jMenuItemSaveOutputToTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveOutputToTXTActionPerformed
        int res = jFileChooserTXT.showSaveDialog(this.getComponent());
        if (res == JFileChooser.APPROVE_OPTION) {
            File outputFile = jFileChooserTXT.getSelectedFile();
            if (outputFile.getName().indexOf(".txt") != outputFile.getName().length()-4) try {
                outputFile = new File(outputFile.getCanonicalPath() + ".txt");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this.getComponent(), "It was not possible to save the file: "+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (outputFile.exists())
                if (JOptionPane.CANCEL_OPTION == JOptionPane.showConfirmDialog(this.getComponent(), "Are you sure? A file with the same name exists and will be overwritten.", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE)) {
                    return;
                }
            
            try {
                
                if (outputFile.exists()) outputFile.delete();

                outputFile.createNewFile();

                FileOutputStream fos = new FileOutputStream(outputFile);
                OutputTextData otd = new OutputTextData(fos);

                for (String s : jTextPaneOutput.getText().split("\n")) {
                    otd.writeln(s);
                }

                otd.close();
                fos.close();            

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this.getComponent(), "It was not possible to save the file: "+e.toString(), "Warning", JOptionPane.ERROR_MESSAGE);
            }
        }

                    
    }//GEN-LAST:event_jMenuItemSaveOutputToTXTActionPerformed

    private void jMenuItemSaveAndLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAndLoadActionPerformed
        saveLoadExec();
    }//GEN-LAST:event_jMenuItemSaveAndLoadActionPerformed

    private void jMenuItemNextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNextStepActionPerformed
        calculator.continueCompute();
    }//GEN-LAST:event_jMenuItemNextStepActionPerformed

    private void jCheckBoxMenuStepByStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuStepByStepActionPerformed
        calculator.setDebug(jCheckBoxMenuStepByStep.isSelected());
    }//GEN-LAST:event_jCheckBoxMenuStepByStepActionPerformed

    private void jCheckBoxMenuITraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuITraceActionPerformed
        calculator.setTrace(jCheckBoxMenuITrace.isSelected());
    }//GEN-LAST:event_jCheckBoxMenuITraceActionPerformed

    private void jMenuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUndoActionPerformed
        ((ICEJTextArea) jTextAreaInput).undo();
    }//GEN-LAST:event_jMenuItemUndoActionPerformed

    private void jMenuItemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRedoActionPerformed
        ((ICEJTextArea) jTextAreaInput).redo();
    }//GEN-LAST:event_jMenuItemRedoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuITrace;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemPreprocessor;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuStepByStep;
    private javax.swing.JMenu jMenuCalculator;
    private javax.swing.JMenuItem jMenuDonation;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenuItem jMenuItemBreak;
    private javax.swing.JMenuItem jMenuItemClean;
    private javax.swing.JMenuItem jMenuItemCleanOutput;
    private javax.swing.JMenuItem jMenuItemDraw;
    private javax.swing.JMenuItem jMenuItemEditHistory;
    private javax.swing.JMenuItem jMenuItemEditInput;
    private javax.swing.JMenuItem jMenuItemFind;
    private javax.swing.JMenuItem jMenuItemHelp;
    private javax.swing.JMenuItem jMenuItemHistoryNext;
    private javax.swing.JMenuItem jMenuItemHistoryPrevius;
    private javax.swing.JMenuItem jMenuItemLastFunctionHelp;
    private javax.swing.JMenuItem jMenuItemLoad;
    private javax.swing.JMenuItem jMenuItemLoadAppending;
    private javax.swing.JMenuItem jMenuItemNewLine;
    private javax.swing.JMenuItem jMenuItemNextStep;
    private javax.swing.JMenuItem jMenuItemRedo;
    private javax.swing.JMenuItem jMenuItemRunNewKernel;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveAndLoad;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JMenuItem jMenuItemSaveOutputToTXT;
    private javax.swing.JMenuItem jMenuItemSaveToStartup;
    private javax.swing.JMenuItem jMenuItemSuggest;
    private javax.swing.JMenuItem jMenuItemUndo;
    private javax.swing.JMenuItem jMenuNew;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JTextArea jTextAreaInput;
    private javax.swing.JTextPane jTextPaneOutput;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JScrollPane outputPane;
    // End of variables declaration//GEN-END:variables

    //User Variable declaration;
    private CommandHistory commandHistory = new CommandHistory();

    private JDialog aboutBox, helpBox;
    private EngCalculatorConsoleHistoryEditor historyEditor;
    private EngCalculatorConsoleInputEditor inputEditor;
    private JFrame drawBox;
    private JDialog findBox;
    private Calculator calculator;
    private CalculatorThread calculatorThread;
    private int lastHint = -1;

    private final JFileChooser jFileChooserICE, jFileChooserTXT;
    private static File workingFile = null;
    private final File STARTUPFILE = new File("startup.ice");
    private boolean preprocessor = true;

    public void saveLoadExec () {
        jMenuItemSaveActionPerformed(null);
        jTextPaneOutput.setText("");
        kernelStartUp(true);
        commandHistory.deleteAllCommands();
        loadHistoryFile();
        evaluateLine();        
    }
    
    private boolean loadHistoryFile() {
        try {
            String inputline = commandHistory.loadFromFile(workingFile);
            
            jTextAreaInput.setText(inputline);
            jTextAreaInput.setCaretPosition(inputline.length());//to focus the cursor on the component

            getFrame().setTitle("ICE - "+workingFile.getName());
            
            return true;
        } catch (IOException e) {
            if (workingFile != STARTUPFILE) JOptionPane.showMessageDialog(this.getComponent(), "It was not possible to load the file. "+e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            workingFile = null; //otherwise the user would not request for a name after a save request
            return false;
        }
    }

    private void saveHistoryFile () {
        try {
            if (workingFile.exists()) workingFile.delete();

            workingFile.createNewFile();

            commandHistory.saveToFile(workingFile);
            
            getFrame().setTitle("ICE - "+workingFile.getName());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this.getComponent(), "It was not possible to save the file: "+e.toString(), "Warning", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void kernelStartUp (boolean coldStart) {
        calculator = new Calculator(coldStart, this);

        if (calculatorThread != null) {
            calculatorThread.stopCalculus();        //try to stop pending calculus loops
            if (!calculatorThread.isInterrupted())  //interrupt the thread if it is running on internal functions (where stopCalculus does not work)
                try {
//                    calculatorThread.stop();
                    calculatorThread.interrupt(); //since stop is deprecated I used also interrupt (which shouldNOT work) in case stop is not implemented
                } catch (SecurityException se) {}
            calculatorThread = null;                //clean the thread memory
        }

        printOnOutputAreaInBold(calculator.compute("informationAbout")+"\n");
    }
    
    private void loadStartUpFile () {
        workingFile = STARTUPFILE;
        if (loadHistoryFile()) {
            printOnOutputAreaInRegular("\n\nStartup.ice file found and executed.\n");
            evaluateLine ();
            jTextAreaInput.setText("");
        }
        workingFile = null;
    }

    public void evaluateLine() {
        if (calculatorThread != null && calculatorThread.getState() == Thread.State.RUNNABLE) {
            printOnOutputAreaInRegular("Wait please, the calculator is computing...\n");
            return;
        }

        String inputline;

        inputline=jTextAreaInput.getText();

        if (preprocessor) {
        
            int prevLength = inputline.length();

            inputline=addMissingLastAnswer(inputline);

            if (prevLength != inputline.length()) {
                jTextAreaInput.setText(inputline);                
                return;
            }

            inputline=inputline.trim();
            
            inputline=inputline.replace("\\\n", "");

            prevLength = inputline.length();
            inputline=addMissingEndingChars(inputline);

            if (prevLength != inputline.length()) {
                jTextAreaInput.setText(inputline);                
                return;
            }
            
            inputline=replaceSpaceWithTimes(inputline);

            if (prevLength != inputline.length()) {
                jTextAreaInput.setText(inputline);                
                return;
            } 
            
        } else inputline=inputline.trim();

        jTextAreaInput.setText("");          
        
        ((ICEJTextArea) jTextAreaInput).clearUndo();

        commandHistory.addCommand(inputline);

        calculatorThread = new CalculatorThread(calculator, inputline);
        calculatorThread.start();
    }

    private String addMissingLastAnswer (String input) {
        if (input.length() < 2) return input;
        char c = input.charAt(1);
        if (! (input.charAt(0) != ' ' || Character.isLetterOrDigit(c) || c == '(' ) ) input = new StringBuilder("answerLast").append(input.substring(1)).toString();
        return input;
    }

    private String replaceSpaceWithTimes (String input) {  
        char pc = '*';
        boolean cas = false;
        boolean withinApices = false;
        StringBuilder result = new StringBuilder(input.length());
        for (char c: input.toCharArray()) {
            if (c == '\'') withinApices = ! withinApices;
            if (! withinApices) {
                if (c == ' ') cas = true;
                else {
                    if (cas == true) {
                        cas = false;
                        if (Character.isDigit(pc) && Character.isLetter(c)) result.append("* ");     
                    }   
                    pc = c;
                }                
            }
            result.append(c);
        }
        return result.toString();                
    }
    

    
    private String addMissingEndingChars (String input) {
        StringBuilder inp = new StringBuilder (input);
        
        //Try to fix brackets to expresisons inside apices
        int beg = -1;
        char c, prevc=' ';
        for (int i=0; i<inp.length(); ++i) {            
            if ((c=inp.charAt(i)) == '\'' &&  prevc != '\\') {
                if (beg == -1) beg = i;
                else {
                    i += ICEJTextArea.addMissingBrackets(ICEJTextArea.countBracketsBalance(inp.substring(beg, i)), inp, i);
                    beg = -1;
                }
            }
            prevc = c;
        }
        
        //Try to fix brackets in the overall expression
        final int[] br = ICEJTextArea.countBracketsBalance(inp.toString());        
        ICEJTextArea.addMissingBrackets(br, inp, inp.length());

        if ((br[ICEJTextArea.AP] & 1) != 0) inp.append('\'');        

        return inp.toString();
    }

    @Override
    public void printOnOutputAreaInRegular (String out) {
        if (lastHint > -1) {
            try {
                outdoc.remove(lastHint, outdoc.getLength() - lastHint);
            } catch (BadLocationException ex) {}
            lastHint = -1;
        }
        printOnOutputArea (out, REGULAR);
    }

    @Override
    public void printOnOutputAreaInBold (String out) {
        if (lastHint > -1) {
            try {
                outdoc.remove(lastHint, outdoc.getLength() - lastHint);
            } catch (BadLocationException ex) {}
            lastHint = -1;
        }
        printOnOutputArea (out, BOLD);
    }

    @Override
    public void printOnOutputAreaInItalic (String out) {
        if (lastHint < 0) lastHint = outdoc.getLength();
        printOnOutputArea (out, ITALIC);
    }

    private void printOnOutputArea (String out, Style s) {
        try {
              outdoc.insertString(outdoc.getLength(), out, s);
        } catch (BadLocationException ex) {}

        jTextPaneOutput.setCaretPosition(outdoc.getLength());
    }
    
    public void appendToInput (String line) {
        int cp = jTextAreaInput.getCaretPosition();
        jTextAreaInput.setText(new StringBuffer(jTextAreaInput.getText()).insert(cp, line).toString());
        jTextAreaInput.setCaretPosition(cp+line.length());
    }

    private void nextHistory() {
        String inputLine=commandHistory.getNextCommand();
        if (inputLine == null) return;
        
        if (inputLine.equals(MleStatement.MULTILINEEXPSTATEMENT)) {
            StringBuilder nextMultiLineExp = new StringBuilder ();
            do {
                nextMultiLineExp.append(inputLine);
                nextMultiLineExp.append("\n");
                inputLine=commandHistory.getNextCommand();
                if (inputLine.equals(MleStatement.MULTILINEEXPSTATEMENT)) {
                    nextMultiLineExp.append(inputLine);
                    nextMultiLineExp.append("\n");
                    break;
                }
            } while (commandHistory.hasNext());
            inputLine = nextMultiLineExp.toString();
        }
        
        jTextAreaInput.setText("");
        ((ICEJTextArea) jTextAreaInput).printOnInputArea (-1, inputLine);
    }

    private void previousHistory() {        
        String inputLine = commandHistory.getPreviousCommand();        
        if (inputLine == null) return;
        
        if (inputLine.equals(MleStatement.MULTILINEEXPSTATEMENT)) {
            StringBuilder prevMultiLineExp = new StringBuilder ();
            do {
                prevMultiLineExp.insert(0, inputLine+"\n");
                inputLine=commandHistory.getPreviousCommand();
                if (inputLine.equals(MleStatement.MULTILINEEXPSTATEMENT)) {
                    prevMultiLineExp.insert(0, inputLine+"\n");
                    break;
                }
            } while (commandHistory.hasPrevious());
            inputLine = prevMultiLineExp.toString();
        }
        
        jTextAreaInput.setText("");
        ((ICEJTextArea) jTextAreaInput).printOnInputArea (-1, inputLine);
    }

    private void appendNewLine () {
        String in = jTextAreaInput.getText();
        int cp = jTextAreaInput.getCaretPosition();
        StringBuilder out = new StringBuilder(in.length()+1);
        out = out.append(in.substring(0, cp)).append("\n").append(in.substring(cp));
        jTextAreaInput.setText(out.toString());
        jTextAreaInput.setCaretPosition(cp+1);
    }

    public static File getWorkingFile() {
        return workingFile;
    }

    private void setPreprocessor (boolean pre) {
        preprocessor = pre;
        ((ICEJTextArea) jTextAreaInput).setPreprocessor(pre);
    }    
    
    public boolean doesUserWantsToExit () {
        if (commandHistory.isModified())
            if (JOptionPane.CANCEL_OPTION == JOptionPane.showConfirmDialog(this.getComponent(), "Are you sure to quit? The history was modified since last load or save.", "Warning", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE)) {
                return false;
            }
        return true;
    }

}
